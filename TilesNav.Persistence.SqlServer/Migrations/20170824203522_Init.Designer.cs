// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using TilesNav.Persistence.SqlServer;

namespace TilesNav.Persistence.SqlServer.Migrations
{
    [DbContext(typeof(TilesContext))]
    [Migration("20170824203522_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TilesNav.Model.TileDatasource", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Endpoint")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid>("Secret");

                    b.HasKey("ID");

                    b.ToTable("TileDatasource");
                });

            modelBuilder.Entity("TilesNav.Model.TileDefinition", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Color")
                        .IsRequired();

                    b.Property<int>("DatasourceId");

                    b.Property<string>("Description");

                    b.Property<string>("Icon")
                        .IsRequired();

                    b.Property<int>("RendererId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("DatasourceId");

                    b.HasIndex("RendererId");

                    b.ToTable("TileDefinitions");
                });

            modelBuilder.Entity("TilesNav.Model.TileRenderer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<Guid>("Secret");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("TileRenderer");
                });

            modelBuilder.Entity("TilesNav.Model.TilesView", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.HasKey("ID");

                    b.ToTable("TilesViews");
                });

            modelBuilder.Entity("TilesNav.Model.TilesViewContainer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("TilesViewID");

                    b.HasKey("ID");

                    b.HasIndex("TilesViewID");

                    b.ToTable("TilesViewContainer");
                });

            modelBuilder.Entity("TilesNav.Model.TilesViewItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DefinitionID");

                    b.Property<int>("Height");

                    b.Property<int?>("TilesViewContainerID");

                    b.Property<int>("Width");

                    b.Property<int>("X");

                    b.Property<int>("Y");

                    b.HasKey("ID");

                    b.HasIndex("DefinitionID");

                    b.HasIndex("TilesViewContainerID");

                    b.ToTable("TilesViewItem");
                });

            modelBuilder.Entity("TilesNav.Model.TileDefinition", b =>
                {
                    b.HasOne("TilesNav.Model.TileDatasource", "Datasource")
                        .WithMany()
                        .HasForeignKey("DatasourceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TilesNav.Model.TileRenderer", "Renderer")
                        .WithMany()
                        .HasForeignKey("RendererId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TilesNav.Model.TilesViewContainer", b =>
                {
                    b.HasOne("TilesNav.Model.TilesView")
                        .WithMany("Containers")
                        .HasForeignKey("TilesViewID");
                });

            modelBuilder.Entity("TilesNav.Model.TilesViewItem", b =>
                {
                    b.HasOne("TilesNav.Model.TileDefinition", "Definition")
                        .WithMany()
                        .HasForeignKey("DefinitionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TilesNav.Model.TilesViewContainer")
                        .WithMany("Tiles")
                        .HasForeignKey("TilesViewContainerID");
                });
#pragma warning restore 612, 618
        }
    }
}
